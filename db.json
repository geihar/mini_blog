[
{
    "model": "sessions.session",
    "pk": "dfnr2765c08xi6ri9zajrlpard1eryi0",
    "fields": {
        "session_data": ".eJxVjEEOwiAQRe_C2pAWCh1cuu8ZyAwMUjWQlHZlvLtt0oVu_3vvv4XHbc1-a7z4OYqr6MXldyMMTy4HiA8s9ypDLesykzwUedImpxr5dTvdv4OMLe-16RxAUOwsq5Eim54pDVGD0SZSYA2MtmO1QyAYtSEVBkcpsbUhIYjPF_C0OK0:1kGj5a:hUA0_XmzU3FUqr71v0CVLekOTtyNkAmXhCYMhDa89Os",
        "expire_date": "2020-09-25T13:27:42.731Z"
    }
},
{
    "model": "blog.tag",
    "pk": 1,
    "fields": {
        "name": "django",
        "created_date": "2020-09-11T13:27:58.635Z",
        "edited_date": "2020-09-11T13:27:58.635Z"
    }
},
{
    "model": "blog.tag",
    "pk": 2,
    "fields": {
        "name": "js",
        "created_date": "2020-09-11T13:28:03.273Z",
        "edited_date": "2020-09-11T13:28:03.274Z"
    }
},
{
    "model": "blog.tag",
    "pk": 3,
    "fields": {
        "name": "css",
        "created_date": "2020-09-11T13:28:06.702Z",
        "edited_date": "2020-09-11T13:28:06.702Z"
    }
},
{
    "model": "blog.tag",
    "pk": 4,
    "fields": {
        "name": "html",
        "created_date": "2020-09-11T13:28:12.246Z",
        "edited_date": "2020-09-11T13:28:12.246Z"
    }
},
{
    "model": "blog.tag",
    "pk": 5,
    "fields": {
        "name": "SQL",
        "created_date": "2020-09-11T13:28:17.098Z",
        "edited_date": "2020-09-11T13:28:17.098Z"
    }
},
{
    "model": "users.user",
    "fields": {
        "password": "pbkdf2_sha256$216000$qSmzwsPOa29l$bWqYFePkBl5xFlwPZcGPZsEm+lTDd7791cO6rTyWRVU=",
        "last_login": "2020-09-11T13:27:42.670Z",
        "is_superuser": true,
        "username": "admin",
        "first_name": "",
        "last_name": "",
        "email": "",
        "is_active": true,
        "date_joined": "2020-09-11T13:23:44.357Z",
        "is_staff": true,
        "groups": [],
        "user_permissions": []
    }
},
{
    "model": "users.user",
    "fields": {
        "password": "pbkdf2_sha256$216000$95lLzOsDc0RC$1gecrbdAKQVpz05HMz+UxnUAN+sAa9wyxi5pIn5VuJA=",
        "last_login": "2020-09-11T13:26:51.516Z",
        "is_superuser": false,
        "username": "Alex",
        "first_name": "",
        "last_name": "",
        "email": "test@gmail.com",
        "is_active": true,
        "date_joined": "2020-09-11T13:25:31.792Z",
        "is_staff": true,
        "groups": [],
        "user_permissions": [
            [
                "change_post",
                "blog",
                "post"
            ]
        ]
    }
},
{
    "model": "users.user",
    "fields": {
        "password": "pbkdf2_sha256$216000$018zTRuvMJrK$7eXhRkbRWCBTX/w4/1/ztfweJRmKC1N7Om9Ji7RfvNk=",
        "last_login": null,
        "is_superuser": false,
        "username": "Tom",
        "first_name": "",
        "last_name": "",
        "email": "test@gmail.com",
        "is_active": true,
        "date_joined": "2020-09-11T13:25:51.608Z",
        "is_staff": true,
        "groups": [],
        "user_permissions": [
            [
                "change_post",
                "blog",
                "post"
            ]
        ]
    }
},
{
    "model": "blog.post",
    "pk": 1,
    "fields": {
        "title": "Шесть Python-пакетов, которые рекомендуется использовать в каждом веб-приложении на Django",
        "text": "Есть бесчисленное множество Python-пакетов, которые легко добавить в любой проект. Но также есть несколько пакетов, которые вы просто не можете не использовать в любом веб-приложении на Django, потому что они зарекомендовали себя как чрезвычайно полезные и экономящие время.\r\n\r\n\r\nМы решили сосредоточиться на тех пакетах, которые в конечном итоге вы будете устанавливать регулярно, и рассказать об установке, а также конфигурациях, необходимых для их приведения в состояние готовности к работе.\r\n\r\n\r\nВ то время как некоторые Python-пакеты предлагают потрясающую функциональность, необходимую для конкретного проекта, пакеты, обсуждаемые ниже, — наиболее ходовые из Django-пакетов.",
        "published": true,
        "img": "",
        "creation_date": "2020-09-11T13:30:06.196Z",
        "pub_date": "2020-09-11T13:45:03.104Z",
        "upd_date": "2020-09-11T13:45:03.104Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1
        ]
    }
},
{
    "model": "blog.post",
    "pk": 2,
    "fields": {
        "title": "Как Django может обрабатывать 100 миллионов запросов в день",
        "text": "Сегодня я буду писать о Django — фреймворке, который верно служит мне на протяжении последних пяти лет. Он помог мне преуспеть в разработке высоконагруженных решений, используемых сегодня миллионами пользователей.\r\n\r\n\r\nДействительно, Python не очень «быстрый» язык программирования, однако он прост, удобен и люди его любят. С точки зрения производительности, он не может быть таким же быстрым, как Go или Node.js, но это становится несущественным, если рассматривать современные инфраструктуры и модульную разработку.\r\n\r\n\r\nПоскольку я уже несколько лет варюсь в этом «котле разработки на Django», я пришел к нескольким ценным выводам, которыми собираюсь с вами поделиться.",
        "published": true,
        "img": "",
        "creation_date": "2020-09-11T13:30:41.784Z",
        "pub_date": "2020-09-11T13:44:58.584Z",
        "upd_date": "2020-09-11T13:44:58.584Z",
        "author": [
            "Tom"
        ],
        "tags": [
            1,
            5
        ]
    }
},
{
    "model": "blog.post",
    "pk": 3,
    "fields": {
        "title": "Как мы автоматизировали весь жизненный цикл серверов",
        "text": "Привет, Хабр! Меня зовут Алексей Назаров. Я занимаюсь автоматизацией в отделе администрирования инфраструктурных систем в Национальной системе платежных карт (АО НСПК) и хотел рассказать немного о наших внутренних продуктах, которые помогают нам развиваться.\r\n\r\n\r\nЕсли вы еще не читали пост про нашу инфраструктуру, то самое время! После прочтения этого поста я бы хотел рассказать о некоторых внутренних продуктах, которые мы разработали и внедрили.",
        "published": true,
        "img": "post_images/ijh19ei4o37axmtkjckgaxhncs4.jpeg",
        "creation_date": "2020-09-11T13:31:12.713Z",
        "pub_date": "2020-09-11T13:44:49.322Z",
        "upd_date": "2020-09-11T13:44:49.323Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            2,
            5
        ]
    }
},
{
    "model": "blog.post",
    "pk": 4,
    "fields": {
        "title": "Как в компании развивался Python. Доклад Яндекса",
        "text": "13 лет назад начался эксперимент по использованию Python в больших сервисах Яндекса. Эксперимент получился удачным (кто бы сомневался!) и Python начал свое победное поползновение по сервисам компании. Яндекс.Афиша, Яндекс.Погода — через некоторое время сервисов стало очень много. Вместе с ними начали появляться «лучшие практики» и «устоявшиеся подходы» к решению задач.",
        "published": false,
        "img": "",
        "creation_date": "2020-09-11T13:46:20.198Z",
        "pub_date": "2020-09-11T13:46:20.198Z",
        "upd_date": "2020-09-11T13:46:20.198Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            2,
            3,
            4,
            5
        ]
    }
},
{
    "model": "blog.post",
    "pk": 5,
    "fields": {
        "title": "Сравнение разных django filter на примере демо базы PostgreSQL",
        "text": "Вместо предисловия\r\n\r\nНачалось всё с того, что мне предложили в рамках предмета \"Основы веб-программирования\" поучаствовать в проекте, вместо проделывания лабораторных работ и курсовой, поскольку я заявил о том, что хотел быть делать нечто отдалённое от общего курса (и так уже достаточно знаний было по связке DRF + Vue, хотелось чего-то нового). И вот в одном из своих PR на github я решил использовать полнотекстовый поиск (задание намекало на это) для фильтрации контента, что заставило меня обратиться к документации Django в поисках того, каким же образом лучше это дело реализовать. Думаю, вы знаете большую часть из тех методов, что были там предложены (contains, icontains, trigram_similar). Все они подходят для каких-то конкретных задач, но не слишком хороши в, именно, полнотекстовом поиске. Пролистав чуть ниже, я наткнулся на раздел, в котором говорилось о взаимодействии Django и Pgsql для реализации document-based поиска, что меня привлекло, поскольку в постгре встроен инструмент для реализации этого самого [полнотекстового] поиска. И я решил, что скорее всего, django просто предоставляет API к этому поиску, исходя из чего такое решение должно работать и точнее и быстрее, чем любые другие варианты. Преподаватель мне не слишком поверил, мы с ним поспорили, и он предложил провести исследование на эту тему. И вот я здесь.",
        "published": false,
        "img": "",
        "creation_date": "2020-09-11T13:46:54.661Z",
        "pub_date": "2020-09-11T13:46:54.661Z",
        "upd_date": "2020-09-11T13:46:54.661Z",
        "author": [
            "admin"
        ],
        "tags": [
            1,
            2
        ]
    }
},
{
    "model": "blog.post",
    "pk": 6,
    "fields": {
        "title": "Что бы я хотел знать когда начинал изучать Django? — очень общий взгляд",
        "text": "Здесь на Хабре много различных инструкций по использованию Django. Эти инструкции часто включают много кода и представляют последовательность шагов, которые нужно сделать, чтобы создать проект.\r\n\r\nКогда я начинал изучать Django и Wagtail по таким инструкциям, меня часто смущало, что пара команд создает кучу непонятных файлов (особенно на самом старте). Последующее описание этих файлов в инструкциях содержало слишком много деталей, которые трудно было усвоить за раз.\r\n\r\nВ этом посте я бы хотел посмотреть на Django с очень «философского вида» — минимум кода, максимум общих фактов. Думаю, что такой взгляд поможет тем, кто хочет начать изучать Django но теряется на старте.",
        "published": true,
        "img": "",
        "creation_date": "2020-09-11T13:47:20.736Z",
        "pub_date": "2020-09-11T13:47:25.284Z",
        "upd_date": "2020-09-11T13:47:25.284Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            2
        ]
    }
},
{
    "model": "blog.post",
    "pk": 7,
    "fields": {
        "title": "Хранение изображений с помощью Django/Django REST",
        "text": "Мне в ходе разработки часто приходится работать с моделями, в которых должны быть изображения. Для удобной организации я использую древовидную структуру папок. В целом, Django предоставляет инструмент для работы с изображениями. Например, вот вопрос на Хабр Q&A о том, как работать с пикчами в Django: использовать ImageField\r\n\r\nПараметр upload_to указывает название папки, в которую нужно загрузить вашу пикчу. И получается, что в рантайме мы никак не сможем повлиять на место куда будет загружено ваше изображение. Выходит что для одной модели, все изображения будут складываться в одну папку. Беспорядок и непорядок какой-то в общем.",
        "published": true,
        "img": "",
        "creation_date": "2020-09-11T13:48:25.478Z",
        "pub_date": "2020-09-11T13:48:25.478Z",
        "upd_date": "2020-09-11T13:48:25.478Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            2,
            3
        ]
    }
},
{
    "model": "blog.post",
    "pk": 8,
    "fields": {
        "title": "Django: один пользователь для всего",
        "text": "Проблема\r\n\r\nВсем привет. При разработке API для очередного веб-портала я взял свой привычный стек:\r\n\r\n\r\nDjango\r\ndjango-rest-framework\r\n\r\nНо в этот раз стояла довольно непривычная задача — сделать одну User модель, которая может иметь несколько разных профилей (Исполнитель, Заказчик). И наличие каждого из профилей дает разные полномочия на работу с одними и теми же ресурсами.\r\n\r\n\r\nТакой подход позволяет пользователям не заводить несколько учетных записей для каждой роли, что зачастую было бы невозможно, ввиду ограничений на модель: уникальный email или номер телефона.\r\n\r\n\r\nИтак, опишем возникшие перед нами проблемы:\r\n\r\n\r\nОдин пользователь – несколько профилей.\r\nКак организовать права каждого из профилей.\r\nДоступ к одним тем же ресурсам от разных профилей.\r\n\r\nНиже я приведу свой способ решения этой задачи, который сложился из уже наработанных привычек по организации Django-проекта, а также попыток придумать наиболее гибкое и масштабируемое решение.",
        "published": false,
        "img": "post_images/1d528e2cb5fbc29ad16c74e5d883c371.png",
        "creation_date": "2020-09-11T13:48:50.292Z",
        "pub_date": "2020-09-11T13:48:50.292Z",
        "upd_date": "2020-09-11T13:48:50.292Z",
        "author": [
            "admin"
        ],
        "tags": [
            1,
            4
        ]
    }
},
{
    "model": "blog.post",
    "pk": 9,
    "fields": {
        "title": "Простое распознавание лица «на лету» в Django",
        "text": "Доброго дня!\r\n\r\nМеня зовут Соболев Андрей и сегодня мы с вами создадим простую «плюшку» к Django, которая будет проверять, что на фотографии именно лицо человека (что бывает полезно в куче ситуаций).\r\n\r\nДля этого нам понадобится OpenCV и 5 минут свободного времени. Поехали.",
        "published": false,
        "img": "",
        "creation_date": "2020-09-11T13:49:11.537Z",
        "pub_date": "2020-09-11T13:49:11.537Z",
        "upd_date": "2020-09-11T13:49:11.537Z",
        "author": [
            "admin"
        ],
        "tags": [
            2,
            4
        ]
    }
},
{
    "model": "blog.post",
    "pk": 10,
    "fields": {
        "title": "Django ORM для начинающих | Оптимизируем запросы",
        "text": "Django ORM (Object Relational Mapping) является одной из самых мощных особенностей Django. Это позволяет нам взаимодействовать с базой данных, используя код Python, а не SQL.\r\nBased on schegel.net\r\n...\r\nДля демонстрации опишу такую модель:",
        "published": true,
        "img": "post_images/1d528e2cb5fbc29ad16c74e5d883c371_CjYIytn.png",
        "creation_date": "2020-09-11T13:49:51.838Z",
        "pub_date": "2020-09-11T13:49:51.838Z",
        "upd_date": "2020-09-11T13:49:51.838Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            5
        ]
    }
},
{
    "model": "blog.post",
    "pk": 11,
    "fields": {
        "title": "Асинхронные задания в Django с Celery",
        "text": "Если в вашем приложении есть какой-то длительный процесс, вы можете обрабатывать его не в стандартном потоке запросов/ответов, а в фоновом режиме.\r\n\r\nК примеру, в вашем приложении пользователь должен отправить картинку-миниатюру (которую, скорее всего, нужно будет отредактировать) и подтвердить адрес электронной почты. Если ваше приложение обрабатывает изображение, а потом отправляет письмо для подтверждения в обработчике запросов, то конечному пользователю придется зачем-то ждать завершения выполнения обеих задач перед тем, как перезагрузить или закрыть страницу. Вместо этого, вы можете передать эти операции в очередь задач и оставить на обработку отдельному процессу, чтобы немедленно отправить пользователю ответ. В таком случае, конечный пользователь сможет заниматься другими делами на стороне клиента во время выполнения обработки в фоновом режиме. Ваше приложение в таком случае также сможет свободно отвечать на запросы других пользователей и клиентов.",
        "published": true,
        "img": "post_images/ragz5r0bqdjfcnvsdg7ezletcem.png",
        "creation_date": "2020-09-11T13:50:47.292Z",
        "pub_date": "2020-09-11T13:50:47.292Z",
        "upd_date": "2020-09-11T13:51:05.176Z",
        "author": [
            "Alex"
        ],
        "tags": [
            1,
            2
        ]
    }
},
{
    "model": "blog.post",
    "pk": 12,
    "fields": {
        "title": "Интеграция .pre-commit hook в Django проект",
        "text": "Доброго дня!\r\n\r\nМеня зовут Соболев Андрей и сегодня я вам расскажу как мы приготовили .pre-commit hook на нашем проекте.\r\n\r\nВступление\r\n\r\nДля начала пару слов, о том что такое в целом хуки (hooks) и для чего они могут быть нужны. Git «из коробки» предоставляет инструмент, который умеет запускать ваши скрипты при наступлении какого-либо события (к примеру пуш на сервер и т.п.)\r\n\r\n.pre-commit это удобная надстройка над дефолтным git pre-commit hook, которая запускает скрипты описанные в .pre-commit-config.yaml перед созданием коммита. В теории звучит просто, перейдем к практике.",
        "published": false,
        "img": "",
        "creation_date": "2020-09-11T13:51:34.153Z",
        "pub_date": "2020-09-11T13:51:34.153Z",
        "upd_date": "2020-09-11T13:51:34.153Z",
        "author": [
            "admin"
        ],
        "tags": [
            1,
            3,
            4
        ]
    }
},
{
    "model": "admin.logentry",
    "pk": 1,
    "fields": {
        "action_time": "2020-09-11T13:27:58.636Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "tag"
        ],
        "object_id": "1",
        "object_repr": "django",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 2,
    "fields": {
        "action_time": "2020-09-11T13:28:03.276Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "tag"
        ],
        "object_id": "2",
        "object_repr": "js",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 3,
    "fields": {
        "action_time": "2020-09-11T13:28:06.703Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "tag"
        ],
        "object_id": "3",
        "object_repr": "css",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 4,
    "fields": {
        "action_time": "2020-09-11T13:28:12.247Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "tag"
        ],
        "object_id": "4",
        "object_repr": "html",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 5,
    "fields": {
        "action_time": "2020-09-11T13:28:17.099Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "tag"
        ],
        "object_id": "5",
        "object_repr": "SQL",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 6,
    "fields": {
        "action_time": "2020-09-11T13:30:06.199Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "1",
        "object_repr": "Шесть Python-пакетов, которые рекомендуется использовать в каждом веб-приложении на Django",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 7,
    "fields": {
        "action_time": "2020-09-11T13:30:41.787Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "2",
        "object_repr": "Как Django может обрабатывать 100 миллионов запросов в день",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 8,
    "fields": {
        "action_time": "2020-09-11T13:31:12.716Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "3",
        "object_repr": "Как мы автоматизировали весь жизненный цикл серверов",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 9,
    "fields": {
        "action_time": "2020-09-11T13:44:49.325Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "3",
        "object_repr": "Как мы автоматизировали весь жизненный цикл серверов",
        "action_flag": 2,
        "change_message": "[{\"changed\": {\"fields\": [\"Published\", \"Img\"]}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 10,
    "fields": {
        "action_time": "2020-09-11T13:44:58.588Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "2",
        "object_repr": "Как Django может обрабатывать 100 миллионов запросов в день",
        "action_flag": 2,
        "change_message": "[{\"changed\": {\"fields\": [\"Published\"]}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 11,
    "fields": {
        "action_time": "2020-09-11T13:45:03.106Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "1",
        "object_repr": "Шесть Python-пакетов, которые рекомендуется использовать в каждом веб-приложении на Django",
        "action_flag": 2,
        "change_message": "[{\"changed\": {\"fields\": [\"Published\"]}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 12,
    "fields": {
        "action_time": "2020-09-11T13:46:20.201Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "4",
        "object_repr": "Как в компании развивался Python. Доклад Яндекса",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 13,
    "fields": {
        "action_time": "2020-09-11T13:46:54.665Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "5",
        "object_repr": "Сравнение разных django filter на примере демо базы PostgreSQL",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 14,
    "fields": {
        "action_time": "2020-09-11T13:47:20.739Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "6",
        "object_repr": "Что бы я хотел знать когда начинал изучать Django? — очень общий взгляд",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 15,
    "fields": {
        "action_time": "2020-09-11T13:47:25.287Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "6",
        "object_repr": "Что бы я хотел знать когда начинал изучать Django? — очень общий взгляд",
        "action_flag": 2,
        "change_message": "[{\"changed\": {\"fields\": [\"Published\"]}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 16,
    "fields": {
        "action_time": "2020-09-11T13:48:25.482Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "7",
        "object_repr": "Хранение изображений с помощью Django/Django REST",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 17,
    "fields": {
        "action_time": "2020-09-11T13:48:50.294Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "8",
        "object_repr": "Django: один пользователь для всего",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 18,
    "fields": {
        "action_time": "2020-09-11T13:49:11.539Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "9",
        "object_repr": "Простое распознавание лица «на лету» в Django",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 19,
    "fields": {
        "action_time": "2020-09-11T13:49:51.841Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "10",
        "object_repr": "Django ORM для начинающих | Оптимизируем запросы",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 20,
    "fields": {
        "action_time": "2020-09-11T13:50:47.294Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "11",
        "object_repr": "Асинхронные задания в Django с Celery",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 21,
    "fields": {
        "action_time": "2020-09-11T13:51:05.178Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "11",
        "object_repr": "Асинхронные задания в Django с Celery",
        "action_flag": 2,
        "change_message": "[{\"changed\": {\"fields\": [\"Img\"]}}]"
    }
},
{
    "model": "admin.logentry",
    "pk": 22,
    "fields": {
        "action_time": "2020-09-11T13:51:34.156Z",
        "user": [
            "admin"
        ],
        "content_type": [
            "blog",
            "post"
        ],
        "object_id": "12",
        "object_repr": "Интеграция .pre-commit hook в Django проект",
        "action_flag": 1,
        "change_message": "[{\"added\": {}}]"
    }
}
]
